name: Version Control

on:
  push:
    branches: [Development, Staging, Production]
    paths-ignore:
      - "**/pom.xml"
      - ".github/workflows/**" # Prevent workflow file changes from triggering

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven" # Cache Maven packages

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Set Version Type
        id: version-type
        run: |
          branch=${GITHUB_REF#refs/heads/}
          if [[ $branch == "Development" ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ $branch == "Staging" ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "env=stage" >> $GITHUB_OUTPUT
          elif [[ $branch == "Production" ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

      - name: Bump Version
        run: |
          # Get current version without SNAPSHOT suffix
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')

          VERSION_TYPE=${{ steps.version-type.outputs.type }}
          ENV=${{ steps.version-type.outputs.env }}

          # Calculate new version
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v type="$VERSION_TYPE" '
            type=="patch" {$NF = $NF + 1}
            type=="minor" {$(NF-1) = $(NF-1) + 1; $NF = 0}
            type=="major" {$1 = $1 + 1; $(NF-1) = 0; $NF = 0}
            {print}' | sed 's/ /./g')

          # Add SNAPSHOT suffix for non-production
          if [[ $ENV != "prod" ]]; then
            NEW_VERSION="${NEW_VERSION}-SNAPSHOT"
          fi

          # Update all module versions
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          mvn versions:commit

          # Save version for commit message
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Verify Modules
        run: mvn clean verify -DskipTests # Verify build works with new versions

      - name: Commit and Push
        run: |
          git add "**/pom.xml"
          git commit -m "ci: bump version to $NEW_VERSION [skip ci]"
          git push
